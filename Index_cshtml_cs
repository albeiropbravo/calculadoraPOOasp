using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using CalculadoraASPPOO.Models;
using System.Collections.Generic;

namespace CalculadoraASPPOO.Pages
{
    /// <summary>
    /// Modelo de la p√°gina principal de la calculadora.
    /// Gestiona la interacci√≥n entre la vista Razor (index.cshtml)
    /// y la l√≥gica implementada en la clase <see cref="Calculadora"/>.
    /// </summary>
    public class IndexModel : PageModel
    {
        // ==============================
        // Propiedades que reciben datos desde la Vista
        // ==============================

        /// <summary>
        /// Primer n√∫mero ingresado por el usuario.
        /// Se enlaza autom√°ticamente con el formulario HTML (data binding).
        /// </summary>
        [BindProperty]
        public double Numero1 { get; set; }

        /// <summary>
        /// Segundo n√∫mero ingresado por el usuario.
        /// Tambi√©n se enlaza con el formulario.
        /// </summary>
        [BindProperty]
        public double Numero2 { get; set; }

        /// <summary>
        /// Resultado de la √∫ltima operaci√≥n realizada.
        /// Se muestra en la vista despu√©s de ejecutar un c√°lculo.
        /// </summary>
        public double Resultado { get; set; }

        // ==============================
        // Instancia de la calculadora
        // ==============================

        /// <summary>
        /// Instancia est√°tica de la calculadora.
        /// Se utiliza para mantener el historial de operaciones
        /// mientras el servidor est√° en ejecuci√≥n.
        /// </summary>
        private static Calculadora calculadora = new Calculadora();

        /// <summary>
        /// Obtiene el historial de operaciones realizadas por la calculadora.
        /// Esta propiedad es de solo lectura y se muestra en la vista.
        /// </summary>
        public IReadOnlyList<OperacionesDate> Historial => calculadora.Historial;

        // ==============================
        // M√©todos de ciclo de vida de la p√°gina
        // ==============================

        /// <summary>
        /// Maneja las peticiones GET de la p√°gina.
        /// Se ejecuta al cargar la vista por primera vez.
        /// </summary>
        public void OnGet()
        {
            // Mostrar el resultado actual almacenado en la calculadora
            Resultado = calculadora.Resultado;
        }

        /// <summary>
        /// Maneja las peticiones POST (cuando el usuario env√≠a el formulario).
        /// Dependiendo del bot√≥n presionado, ejecuta la operaci√≥n correspondiente.
        /// </summary>
        /// <param name="operacion">
        /// Identificador de la operaci√≥n enviada desde el formulario.
        /// Puede ser: "sumar", "restar", "multiplicar", "dividir" o "limpiar".
        /// </param>
        public void OnPost(string operacion)
        {
            // Asignar los valores ingresados por el usuario a la calculadora
            calculadora.Numero1 = Numero1;
            calculadora.Numero2 = Numero2;

            // Ejecutar la operaci√≥n seg√∫n el bot√≥n presionado
            switch (operacion)
            {
                case "sumar":
                    Resultado = calculadora.Sumar();
                    break;

                case "restar":
                    Resultado = calculadora.Restar();
                    break;

                case "multiplicar":
                    Resultado = calculadora.Multiplicar();
                    break;

                case "dividir":
                    Resultado = calculadora.Dividir();
                    break;

                case "limpiar":
                    calculadora.Limpiar();
                    Resultado = 0;
                    break;
            }
        }
    }
}


üìå Explicaci√≥n did√°ctica para tus estudiantes
PageModel en Razor Pages
IndexModel act√∫a como el ‚Äúcontrolador‚Äù de esta p√°gina.
Contiene las propiedades que se enlazan con los formularios (Numero1, Numero2) y la l√≥gica para manejar las solicitudes.

Diferencia entre OnGet y OnPost
OnGet(): se ejecuta cuando la p√°gina se abre por primera vez (carga inicial).
OnPost(string operacion): se ejecuta cuando el usuario env√≠a el formulario (por ejemplo, al presionar el bot√≥n ‚ÄúSumar‚Äù).

Persistencia con static
La calculadora se define como static, lo que significa que se mantiene en memoria mientras el servidor est√© activo.
Esto permite conservar el historial de operaciones entre diferentes peticiones de la misma p√°gina.

Switch con operaciones
Seg√∫n el valor de operacion (que viene del bot√≥n del formulario), se ejecuta la operaci√≥n correspondiente (sumar, restar, etc.).
